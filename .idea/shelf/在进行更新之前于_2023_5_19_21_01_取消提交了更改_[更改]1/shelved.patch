Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 官方库\r\nimport torch, os, time\r\nos.environ[\"KMP_DUPLICATE_LIB_OK\"] = \"TRUE\"\r\nimport numpy as np\r\nfrom imageio import imread\r\nfrom skimage.metrics import structural_similarity as compare_ssim\r\nfrom skimage.metrics import peak_signal_noise_ratio as compare_psnr\r\n # 私人库\r\n\r\nfrom public import parse_args, log\r\nfrom data_process import show, save_result\r\nfrom model import DnCNN\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    # 参数\r\n    args = parse_args(1)  #测试集\r\n\r\n    # model = DnCNN()\r\n    if not os.path.exists(os.path.join(args.model_dir, args.model_name)):  # model_001若不存在，则加载model\r\n\r\n        model_cpu = torch.load(os.path.join(args.model_dir, 'model.pth'), map_location='cpu')  # 映射到CPU，此模型不会被加载到cuda\r\n        model = torch.load(os.path.join(args.model_dir, 'model.pth'), map_location='cpu')  # 映射到CPU\r\n        # load weights into new model\r\n        log('load trained model on Train400 dataset by kai')  #张凯的模型\r\n    else:\r\n        # model.load_state_dict(torch.load(os.path.join(args.model_dir, args.model_name)))\r\n        model_cpu = torch.load(os.path.join(args.model_dir, args.model_name), map_location='cpu')\r\n        model = torch.load(os.path.join(args.model_dir, args.model_name), map_location='cpu')\r\n        log('load trained model')   #本地训练的模型\r\n\r\n    #    params = model.state_dict()\r\n    #    print(params.values())\r\n    #    print(params.keys())\r\n    #\r\n    #    for key, value in params.items():\r\n    #        print(key)    # parameter name\r\n    #    print(params['dncnn.12.running_mean'])\r\n    #    print(model.state_dict())\r\n\r\n    model_cpu.eval()  # evaluation mode  设置为预测模式\r\n    #    model.train()\r\n\r\n    if torch.cuda.is_available():  # GPU\r\n        model = model.cuda()  # 加载到GPU\r\n\r\n    if not os.path.exists(args.result_dir):  # 结果路径\r\n        os.mkdir(args.result_dir)  # 创造目录\r\n\r\n    for set_cur in args.set_names:  # 测试图片的文件名\r\n\r\n        if not os.path.exists(os.path.join(args.result_dir, set_cur)):  # 未找到保存文件的路径，则创造路径\r\n            os.mkdir(os.path.join(args.result_dir, set_cur))\r\n        psnrs = []  # 计算psnr与ssim的数组\r\n        ssims = []\r\n\r\n        for im in os.listdir(os.path.join(args.set_dir, set_cur)):  # 返回指定的文件夹包含的文件或文件夹的名字的列表\r\n            if im.endswith(\".jpg\") or im.endswith(\".bmp\") or im.endswith(\".png\"):\r\n                # 判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False\r\n                x = np.array(imread(os.path.join(args.set_dir, set_cur, im)), dtype=np.float32) / 255.0\r\n                # 读入文件，float32位，得到后每个数/255,归一化\r\n                #  dtype:数组中的数据类型\r\n\r\n                np.random.seed(seed=0)  # for reproducibility 随机数种子\r\n                y = x + np.random.normal(0, args.sigma / 255.0, x.shape)   # 从正态（高斯）分布中抽取随机样本\r\n                # 分布的均值（中心）0，分布的标准差（宽度）噪声级别/255 输出值的维度。为X的维度\r\n                # Add Gaussian noise without clipping\r\n                y = y.astype(np.float32)  # 转换数据类型 float32位\r\n                y_ = torch.from_numpy(y).view(1, -1, y.shape[0], y.shape[1])\r\n                # 创建张量，维度 1 1 481 321\r\n                # view重构维度\r\n                torch.cuda.synchronize()  # 等待当前设备上所有流中的所有核心完成\r\n                start_time = time.time()  # 计算代码运行时间\r\n                # ceshi = y_.nelement\r\n                # ceshi2 = y_.squeeze(2)\r\n                # ceshi = y.size\r\n                if y.size < 154402:  # 图片较小，用GPU测试\r\n                    y_ = y_.cuda()\r\n                    x_ = model(y_)  # 使用模型对y_进行处理，输出x_\r\n                    # inference\r\n                else:   # 图片较大，用GPU测试\r\n                    x_ = model_cpu(y_)\r\n                x_ = x_.view(y.shape[0], y.shape[1])  # 把x_维度处理为二维\r\n                x_ = x_.cpu()  # 将变量放在CPU上\r\n                x_ = x_.detach().numpy().astype(np.float32)  # 整理为float32 数组 阻断反向传播\r\n                torch.cuda.synchronize()\r\n                elapsed_time = time.time() - start_time\r\n                print('%10s : %10s : %2.4f second' % (set_cur, im, elapsed_time))\r\n\r\n                psnr_x_ = compare_psnr(x, x_)  # 比较 原图 与 加噪声再去噪的图 计算psnr\r\n                ssim_x_ = compare_ssim(x, x_)\r\n\r\n                # ssim_x_ = compare_ssim(x, x_)\r\n\r\n                # if args.save_result:\r\n                name, ext = os.path.splitext(im)  # 文件名 后缀\r\n                # show(np.hstack((y, x_)))  # show the image\r\n                save_result(x_, path=os.path.join(args.result_dir, set_cur,\r\n                                                  name + '_dncnn' + ext))\r\n                # save the denoised image  矩阵 ， 路径\r\n                psnrs.append(psnr_x_)\r\n                ssims.append(ssim_x_)\r\n        psnr_avg = np.mean(psnrs)\r\n        ssim_avg = np.mean(ssims)\r\n        psnrs.append(psnr_avg)\r\n        ssims.append(ssim_avg)\r\n        if args.save_result:\r\n         save_result(np.hstack((psnrs, ssims)), path=os.path.join(args.result_dir, set_cur, 'results.txt'))\r\n        log('Datset: {0:10s} \\n  PSNR = {1:2.2f}dB, SSIM = {2:1.4f}'.format(set_cur, psnr_avg, ssim_avg))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
--- a/test.py	
+++ b/test.py	
@@ -99,7 +99,7 @@
                 save_result(x_, path=os.path.join(args.result_dir, set_cur,
                                                   name + '_dncnn' + ext))
                 # save the denoised image  矩阵 ， 路径
-                psnrs.append(psnr_x_)
+                psnrs.append(psnr_x_)  # 向列表末尾添加元素
                 ssims.append(ssim_x_)
         psnr_avg = np.mean(psnrs)
         ssim_avg = np.mean(ssims)
